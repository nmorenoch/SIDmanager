"""
05-05-2013

@author: Nicolas Moreno Chaparro
         nicolas.morenochaparro@oist.jp

Officially Modified on 08-23-2016: This script was modifed before for modeling of block copolyme blends and surfaces effects, however only was updated this day.


23-01-2020

Modified version to work with a different set of data files and scripts consistent with the mcf software. The modifications will keep consistency between traditional implementa
tion of that code and the data structure I used for running simulations.

It generate a set of new simulation setup, creating the proper folders and input files 

######   OPTIMIZED VERSION #########
Flexible variable definition and DataFrame tools from pandas are implemented.


"""
import datetime
import pandas as pd
import sys, os, re
import numpy as np
#import createJavaInput as ji
import appendSID as asid
#import createInputMCF as ci
import createFineScales as cfs
import createFolders as cf
import SIDlog as slog
import createClusterScript as ccs
#import replicateBox as rb
#import createBoxColloid as cbox
import createBox as cbox
import createBC as cbc ## Create boundary conditions
#import loneToWS as ltw


"""
input:
fJavaScript - Name file of the script java uses to generates the simulation data. 
init, fin   - Initial and final SID numbers to generate nwe simulations.
fSIDlog     - Latex file where the SID log infromation is stored 'SIDdetails.tex'
fSIDdet     - .sid file with the details of all the simulation, ussually generated by appendSID 'ALLSID.sid'
javaPath    - Path of the java module.
"""

"""
#Defining a class allows to code defaults constructor for all the variables, while only the desired variables need to be provided to set a new simulation.
"""

class setSID():

    def __init__(self, init, fin, D):
        self.init, self.fin = init,fin
        self.total = int(fin) - int(init) ##Total of simulations to create

        #try: D['job_submit_date'] or D['date']
        #except: pass
        #else:
        now   = datetime.datetime.now()
        self.date  = "%d-%d-%d" % (now.month, now.day, now.year)
        D['job_submit_date']= self.date
        D['date']= self.date
        
        # Additional variables can be included, however the variables stored in SIDlog must be updated inside that script in order to dump all the data properly.
        # Looping over the defined variables
        l = []
        for i in range(len(D)):
            aName = D.index[i]
            #dataType = self.dataT(D.item(i))
            dataType = self.dataT(D[i]) ##Modified on 03/18, it seems a recent update in canopy requires to change the calling D.item(i) by D[i]
            val  = (dataType*[D[i]])  ##Is dumb but i need to put as a list in order to construct the Series using dicts
            d = pd.Series(val, name=aName)
            l.append(d)
        self.vars = pd.DataFrame(l).T   #Because of transposing the array, it is posible to call the data by variable name.

        #If the SID will be constructed as a sequence from init to fin
        self.vars['SID'] = (np.arange(init,fin))
        
        #dumpFile=[]; dumpVelFile=[]; dumpForceFile=[]; dumpAllFile=[]; dataNameFile = []
        #for i in range(self.total):
        #    dataNameFile.append("\"data_%d.%s\"" % (self.vars['SID'][i], self.vars['simType'][i]))
        #    dumpFile.append("\"./dumps/%s%d_%d.*.dump\"" % (self.vars['simType'][i],self.vars['SID'][i],self.vars['runID'][i]))
        #    colloidFile.append("\"./vel/%s%d_%d.*.dump\"" % (self.vars['simType'][i],self.vars['SID'][i],self.vars['runID'][i]))
        #    dumpForceFile.append("\"./force/%s%d_%d.*.dump\"" % (self.vars['simType'][i],self.vars['SID'][i],self.vars['runID'][i]))


        #self.vars['dumpFile']      = dumpFile
        #self.vars['dumpVelFile']   = dumpVelFile
        #self.vars['dumpForceFile'] = dumpForceFile
        #self.vars['dumpAllFile']   = dumpAllFile
        #self.vars['dataName']      = dataNameFile


    def dataT(self, val):
        if isinstance(val,int):   return np.ones(self.total, dtype=int)
        if isinstance(val,float): return np.ones(self.total)
        if isinstance(val,str):   return self.total
        if isinstance(val[0],str):return self.total
                
    def setDataByPropIndex(self, var, valueVar):
        self.vars[var] = valueVar
        

    def setDataByPropName(self, varName, valueVar):
        self.vars[varName] = valueVar
        #print self.vars['varName'], 'vars'
        #print valueVar, 'valueVAr'

    def setData(self, list):
        for i in list:
             try: float(i[0])
             except: setDataByPropName(i[0],i[1])     
             else:   setDataByPropIndex(i[0],i[1]) 
            

    def doMain(self, fSIDlog, fSIDdet, fSIDAlldet, shortHeader, inSource, clusterSource, inVars, scriptVars, bcVars, memor, folderScripts, flagNewVars, flagRandomNumber=1, flagCopyBox=1):
        ##Providing a random number in case I want the simulation constructor to provide a random number is ran = 1.
        if flagRandomNumber == 1:
                self.vars['random_seed'] = np.random.randint(0,100000,self.total)
        
        sim = self.vars
        varN = self.vars.T.index

        #Creating folders
        cf.createFolder(self.init,self.fin,sim[inVars.index],folderScripts)

        if flagCopyBox ==0: ##This flag allows to skip the box generation. By defult the box generation will handdled directly by lammps code. This one allows chains
            box = ['dataName', 'dim','lbox', 'rhoN', 'polyL', 'rs', 'pFrac', 'bFrac', 'nSolv','solvFrac', 'additBF', 'addFrac', 'addLen', 'location','coreL']  ##VAr entering into              boxgenerator
                    #(oFile, dimension, lbox, m, rho, polyL, ro, pFrac, blockFracs, nSolv, solvFrac, additBF="0", addFrac=0.0, addLen=1.0, location=0)

            for i in range(self.total):
                folder= sim['SID'].T[i].__str__()
                details = sim[box].T[i]  #extracting only the selected var by name, and later extracting for the i experiment.
                
                cBox = cbox.dataFile(folder+'/'+details[0].replace('\"',''), details[1], details[2], details[3], details[4], details[5], details[6], details[7], details[8],            details[9],
                                     details[10], details[11], details[12], details[13],details[14])
                cBox.atoms()
            
        #else:
        #    rb.copyData(flagCopyBox, self.init, self.fin)

        ###Creating a flag variable to verify if new tracking variables have been added.
        ####If False the header of the previous file is preserved, and the file is just appended to the original in the SIDlog folder
        if flagNewVars==True:
            flagHeader='2'
            print (flagHeader, "the flag header",flagNewVars)   
        else:
            flagHeader='0'

        #Creating FS lammps file with relevant variables
        cfs.setIndex(self.init, self.fin, inSource, sim[inVars.index], inVars.index,folderScripts)
        ccs.createScript(self.init, self.fin, clusterSource,sim[scriptVars.index])
        bcSource = sim['bcFile'].T[0]  ##readin directly from array of var that rather than in constructor
        cbc.setIndex(self.init,self.fin,bcSource,sim[bcVars.index],bcVars.index, folderScripts)  ####NMC This script is creating the BC file but also copying the default data point
                                                                                ### generation along with regions definition and pairstyle file.

    #ltw.upload(init,fin)

        
        ##################Here it can be specified the short version of SID log, this one will be used in the latex table generation
        h = shortHeader ### I am lazy
        ###############        #
        #appending the info of the simulations created to the .sid file, iterating over each simulation
        for i in range(self.total):
            details = sim[h].T[i]  #extracting only the selected var by name, and later extracting for the i experiment.
            print(details.size, 'size of details')

           
            allDetails = sim.T[i]
            asid.doSID(details, fSIDdet, flagHeader, copyFrom='0',head=h)
            asid.doSID(allDetails, fSIDAlldet, flagHeader, copyFrom='0', head=varN) 

"""
        #generating Latex file with the SID table.
       # slog.doLog(fSIDdet, fSIDlog, '1')  #Currently this is a dummy flag sinces always the header will be constructed.

      


    #This Function prints a string list that can be used to define variables like myVars
    def getVarN(self):
        print ((self.varN.T).tolist())

"""
        
